#!/usr/bin/env python
# -*- coding: gbk -*-

import sys
import os
import traceback

def create_range_callback(option, opt, value, parser):
    tmp = value.split(",")
    res = []
    for e in tmp:
        try:
            i, j = map(int, e.split('-'))
            res +=  range(i,j+1)
        except:
            res.append(int(e))
    setattr(parser.values, option.dest, res)

if __name__ == "__main__":
    from optparse import OptionParser, OptionGroup
    parser = OptionParser(usage="usage:%prog [options] [file]")
    parser.add_option("-d", dest="delim",help="delimeter, default tab",default="\t")
    parser.add_option("-i", dest="index",help="the colom to put,start from 0, default NF (number of field) Note: this index can be -1 ", default=None)
    # ==  only insert const "value"
    group_const = OptionGroup(parser, "Const Value Options", "insert const value")
    group_const.add_option("-p", dest="param",help="the value to be put, default '-' " , default='-')
    parser.add_option_group(group_const)
    # ==  insert value by key in a file
    group_key = OptionGroup(parser, "Key Value Options", "insert value by key in a File")
    group_key.add_option("-f", dest="key_file",help="the file contains key:value" ,default = None)
    group_key.add_option("-k", dest="key_cols1",help="the key cols in <key_file>, default 0(the first col) Example: 1,3-5,10 (1,3,4,10)" , action = "callback", callback = create_range_callback, type = "string", default=None)
    group_key.add_option("-v", dest="value_cols",help="the value cols in <key_file>, the lasted meet value sepcified by key will be store, default to the right remain of max col in key_cols" , action = "callback", callback = create_range_callback, type = "string", default=None)
    group_key.add_option("-K", dest="key_cols2",help="the key cols in <input_file>" , action = "callback", callback = create_range_callback, type = "string", default=None)
    group_key.add_option("--dv", dest="default_value",help="the default value if <input_file>'s key not in <key_file>, default skip" ,default= None)
    parser.add_option_group(group_key)

    (options,args) = parser.parse_args()


    key_file = options.key_file
    index = options.index
    if index != None:
        index = int(index)
    delim = options.delim

    # 遍历文件列表
    fd_list = []
    if not args:
        fd_list.append(sys.stdin)
    else:
        for file in args:
            fd_list.append(open(file))

    # 是插入固定值
    if key_file is None:
        param = options.param

        for fd in fd_list:
            for line in fd:
                line = line.rstrip('\n')
                ll = line.split(delim)
                if index is None:
                    index = len(ll)
                ll.insert(index,param)
                print delim.join(ll)
    else:
        key_cols1 = options.key_cols1
        key_cols2 = options.key_cols2
        value_cols = options.value_cols
        if key_cols1 is None and key_cols2 is None:
            key_cols1 = [0]
            key_cols2 = [0]
        elif key_cols2 is None:
            key_cols2 = key_cols1
        elif key_cols1 is None:
            key_cols1 = key_cols2

        if value_cols is None:
            max_key_col = max(key_cols1)
        if len(key_cols1) != len(key_cols2):
            print>>sys.stderr, "Error: the lens of two key_cols are not equal"
            exit(1)

        # 读取key value
        dd = {}
        for line in open(key_file):
            line = line.rstrip('\n')
            ll = line.split(delim)
            try:
                key = tuple([ll[i] for i in key_cols1])
            except:
                traceback.print_exc()
                print>>sys.stderr, line
                exit(-1)
            # 如果没有设置value 列数，默认使用key最右侧剩下的
            if value_cols is None:
                value =  ll[max_key_col+1:]
            else:
                value =  [ ll[i] for i in value_cols]
            dd[key] = delim.join(value)

        # 插入value
        for fd in fd_list:
            for line in fd:
                line = line.rstrip('\n')
                ll = line.split(delim)
                if index is None:
                    index = len(ll)
                key = tuple([ll[i] for i in key_cols2])
                    #print>>sys.stderr, "Error: the line skiped for key [%s] not found, \n %s" % ( delim.join(key), line)

                value = dd.get(key,options.default_value)
                if value is None:
                    continue
                ll.insert(index,value)
                print delim.join(ll)


